///////////////////////////////////////////////////////////////////////////////
// EXTERNAL INTERFACE
///////////////////////////////////////////////////////////////////////////////

output on/off SPI;

output (u32 clock, u8 bit_order, u8 data_mode) SPI_TRANSACTION_BEGIN;
output none                                    SPI_TRANSACTION_END;

output (byte? value) SPI_TRANSFER_REQUEST;
input  byte          SPI_TRANSFER_DONE;

code/await Spi             (none)            -> NEVER;
code/await SPI_Transaction (var u32 freq, var u8 byte_order, var u8 mode, var int? cs, var int? csn) -> NEVER;
code/await SPI_Transfer    (var byte? value) -> byte;

///////////////////////////////////////////////////////////////////////////////
// DECLARATIONS
///////////////////////////////////////////////////////////////////////////////

#include "c.ceu"
#include "arduino/avr.ceu"
#include "arduino/arduino.ceu"

// Constants copied from "<arduino>/hardware/avr/libraries/SPI/src/SPI.h"

#define SPI_LSBFIRST 0
#define SPI_MSBFIRST 1

#define SPI_MODE0 0x00
#define SPI_MODE1 0x04
#define SPI_MODE2 0x08
#define SPI_MODE3 0x0C

#define SPI_MODE_MASK    0x0C  // CPOL = bit 3, CPHA = bit 2 on SPCR
#define SPI_CLOCK_MASK   0x03  // SPR1 = bit 1, SPR0 = bit 0 on SPCR
#define SPI_2XCLOCK_MASK 0x01  // SPI2X = bit 0 on SPSR

native/pos do
    int ceu_callback_spi (int cmd, tceu_callback_val p1, tceu_callback_val p2)
    {
        if (cmd == CEU_CALLBACK_ABORT) {
            SPCR &= ~_BV(SPE);  // releases PIN13
        }
        return 0;               // lets the Ceu runtime abort
    }
    tceu_callback CEU_CALLBACK_SPI = { &ceu_callback_spi, NULL };
end
{ ceu_callback_register(&CEU_CALLBACK_SPI); }

///////////////////////////////////////////////////////////////////////////////
// INPUT / OUTPUT
///////////////////////////////////////////////////////////////////////////////

output (on/off v) SPI do
    if v then
        var u8   port = {digitalPinToPort(SS)};
        var u8   bit  = {digitalPinToBitMask(SS)};
        var u8&& reg  = {portModeRegister(@port)};

        if (*reg & bit) == 0 then
            {digitalWrite(SS, HIGH);}
        end

        {
            pinMode(SS, 1);

            SPCR |= _BV(MSTR);
            SPCR |= _BV(SPE);

            pinMode(SCK, 1);
            pinMode(MOSI, 1);
        }
    else
        { SPCR &= ~_BV(SPE); }      // disables the SPI Module
    end
end

output (u32 clock, u8 bit_order, u8 data_mode) SPI_TRANSACTION_BEGIN do
    {
        u32 clockSetting = F_CPU / 2;
        u8  clock_div    = 0;
        while (clock_div<6 && @(clock)<clockSetting) {
            clockSetting /= 2;
            clock_div++;
        }

        // Compensate for the duplicate fosc/64
        if (clock_div == 6) {
            clock_div = 7;
        }

        // Invert the SPI2X bit
        clock_div ^= 0x1;

        SPCR = _BV(SPE) | _BV(MSTR) | ((@bit_order == SPI_LSBFIRST) ? _BV(DORD) : 0) |
          (@data_mode & SPI_MODE_MASK) | ((clock_div >> 1) & SPI_CLOCK_MASK);
        SPSR = clock_div & SPI_2XCLOCK_MASK;
    }
end

output (byte? value) SPI_TRANSFER_REQUEST do
    {SPCR |= _BV(SPIE);}
    if value? then
        {SPDR = @(value!);}
    else
        {SPDR = SPDR;}  // Have to write something to start conversion
    end
end

spawn async/isr [_SPI_STC_vect_num,0] do
    { bitClear(SPCR,SPIE); }
    emit SPI_TRANSFER_DONE({SPDR});
end

///////////////////////////////////////////////////////////////////////////////
// ABSTRACTIONS
///////////////////////////////////////////////////////////////////////////////

code/await Spi (none) -> NEVER do
    emit SPI(on);
    do finalize with
        emit SPI(off);
    end
    await FOREVER;
end

code/await SPI_Transaction (var u32 freq, var u8 byte_order, var u8 mode, var int? cs, var int? csn) -> NEVER do
#ifdef CEU_FEATURES_ISR_SLEEP
    { ceu_pm_set(CEU_PM_SPI, 1); }
#endif
    emit SPI_TRANSACTION_BEGIN(freq,byte_order,mode);
    if cs? then
        _digitalWrite(cs!, _HIGH);
    else/if csn? then
        _digitalWrite(csn!, _LOW);
    end

    do finalize with
        if cs? then
            _digitalWrite(cs!, _LOW);
        else/if csn? then
            _digitalWrite(csn!, _HIGH);
        end
        emit SPI_TRANSACTION_END;
#ifdef CEU_FEATURES_ISR_SLEEP
        {ceu_pm_set(CEU_PM_SPI, 0);}
#endif
    end
    await FOREVER;
end

code/await SPI_Transfer (var byte? value) -> byte do
    emit SPI_TRANSFER_REQUEST(value);
    var byte recv = await SPI_TRANSFER_DONE;
    escape recv;
end
