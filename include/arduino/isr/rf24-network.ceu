#define NETWORK_REQ_ADDRESS 195
#define NETWORK_DEFAULT_ADDRESS 04444
#define NETWORK_ADDR_RESPONSE 128
#define NETWORK_PING 130
#define NETWORK_ACK 193

#define TX_NORMAL 0
#define TX_ROUTED 1

data RF24Network_ with
    var&    Nrf24l01_ nrf;
    var     u16       address;
    var     u16       mask;
    var     u16       parent_address;
    var     u8        parent_pipe;
    var     u16       tx_seqno = 0;
    var[32] byte      buf;
    event   none      ok;
    event   none      rx;
end

native/plain _RF24Network__Header, _RF24Network__logicalToPhysicalStruct;
native/pre do
    struct RF24Network__Header
    {
      uint16_t from_node; /**< Logical address where the message was generated */
      uint16_t to_node; /**< Logical address where the message is going */
      uint16_t id; /**< Sequential message ID, incremented every time a new frame is constructed */
      /**
       * Message Types:
       * User message types 1 through 64 will NOT be acknowledged by the network, while message types 65 through 127 will receive a network ACK.
       * System message types 192 through 255 will NOT be acknowledged by the network. Message types 128 through 192 will receive a network ACK. <br>
       * <br><br>
       */
      unsigned char type; /**< <b>Type of the packet. </b> 0-127 are user-defined types, 128-255 are reserved for system */

      /**
      * During fragmentation, it carries the fragment_id, and on the last fragment
      * it carries the header_type.<br>
      */
      unsigned char reserved; /**< *Reserved for system use* */
    };

    struct RF24Network__logicalToPhysicalStruct{
        uint16_t send_node;
        uint8_t send_pipe;
        bool multicast;
    };
end

native/pos do
    bool RF24Network__is_valid_address( uint16_t node ) {
      bool result = true;

      while(node)
      {
        uint8_t digit = node & 0x07;
#if !defined (RF24NetworkMulticast)
        if (digit < 1 || digit > 5)
#else
        if (digit < 0 || digit > 5) //Allow our out of range multicast address
#endif
        {
          result = false;
          //IF_SERIAL_DEBUG_MINIMAL(printf_P(PSTR("*** WARNING *** Invalid address 0%o\n\r"),node););
          break;
        }
        node >>= 3;
      }

      return result;
    }

    uint64_t RF24Network__pipe_address (uint16_t node, uint8_t pipe) {
        static uint8_t address_translation[] = { 0xc3,0x3c,0x33,0xce,0x3e,0xe3,0xec };
        uint64_t result = 0xCCCCCCCCCCLL;
        uint8_t* out = reinterpret_cast<uint8_t*>(&result);

        // Translate the address to use our optimally chosen radio address bytes
        uint8_t count = 1; uint16_t dec = node;

        while (dec) {
#if defined (RF24NetworkMulticast)
            if (pipe != 0 || !node)
#endif
            {
                out[count]=address_translation[(dec % 8)];      // Convert our decimal values to octal, translate them to address bytes, and set our address
            }
            dec /= 8;
            count++;
        }

#if defined (RF24NetworkMulticast)
        if(pipe != 0 || !node)
#endif
        {
            out[0] = address_translation[pipe];
        }
#if defined (RF24NetworkMulticast)
        else
        {
          out[1] = address_translation[count-1];
        }
#endif

        //IF_SERIAL_DEBUG(uint32_t* top = reinterpret_cast<uint32_t*>(out+1);printf_P(PSTR("%lu: NET Pipe %i on node 0%o has address %lx%x\n\r"),millis(),pipe,node,*top,*out));

        return result;
    }

    bool RF24Network__is_descendant(tceu_data_RF24Network_* net, uint16_t node ) {
        return ( node & net->mask ) == net->address;
    }

    bool RF24Network__is_direct_child(tceu_data_RF24Network_* net, uint16_t node ) {
      bool result = false;

      // A direct child of ours has the same low numbers as us, and only
      // one higher number.
      //
      // e.g. node 0234 is a direct child of 034, and node 01234 is a
      // descendant but not a direct child

      // First, is it even a descendant?
      if ( RF24Network__is_descendant(net, node) )
      {
        // Does it only have ONE more level than us?
        uint16_t child_node_mask = ( ~ net->mask ) << 3;
        result = ( node & child_node_mask ) == 0 ;
      }
      return result;
    }

    uint16_t RF24Network__direct_child_route_to( tceu_data_RF24Network_* net, uint16_t node )
    {
      // Presumes that this is in fact a child!!
      uint16_t child_mask = ( net->mask << 3 ) | 0x07;
      return node & child_mask;

    }

    bool RF24Network__logicalToPhysicalAddress(tceu_data_RF24Network_* net, RF24Network__logicalToPhysicalStruct *conversionInfo)
    {
      //Create pointers so this makes sense.. kind of
      //We take in the to_node(logical) now, at the end_ of the function, output the send_node(physical) address, etc.
      //back to the original memory address that held the logical information.
      uint16_t *to_node = &conversionInfo->send_node;
      uint8_t *directTo = &conversionInfo->send_pipe;
      bool *multicast = &conversionInfo->multicast;

      // Where do we send this?  By default, to our parent
      uint16_t pre_conversion_send_node = net->parent_address;

      // On which pipe
      uint8_t pre_conversion_send_pipe = net->parent_pipe;

     if(*directTo > TX_ROUTED) {
        pre_conversion_send_node = *to_node;
        *multicast = 1;
        //if(*directTo == USER_TX_MULTICAST || *directTo == USER_TX_TO_PHYSICAL_ADDRESS){
            pre_conversion_send_pipe=0;
        //}
      }
      // If the node is a direct child,
      else
      if ( RF24Network__is_direct_child(net, *to_node) )
      {
        // Send directly
        pre_conversion_send_node = *to_node;
        // To its listening pipe
        pre_conversion_send_pipe = 5;
      }
      // If the node is a child of a child
      // talk on our child's listening pipe,
      // and let the direct child relay it.
      else if ( RF24Network__is_descendant(net, *to_node) )
      {
        pre_conversion_send_node = RF24Network__direct_child_route_to(net, *to_node);
        pre_conversion_send_pipe = 5;
      }

      *to_node = pre_conversion_send_node;
      *directTo = pre_conversion_send_pipe;

      return 1;
    }
end

code/tight RF24Network_setup_address (var& RF24Network_ net) -> none do
    // First, establish the node_mask
    var u16 mask_check = 0xFFFF;
#if defined (RF24NetworkMulticast)
    var u8 count = 0;
#endif

    loop do
        if (net.address & mask_check) == 0 then
            break;
        end
        mask_check = mask_check << 3;
#if defined (RF24NetworkMulticast)
        count = count + 1;
#endif
    end
#if defined (RF24NetworkMulticast)
    net.multicast_level = count;
#endif

    net.mask = ~mask_check;

    // parent mask is the next level down
    var u16 parent_mask = net.mask >> 3;

    // parent node is the part IN the mask
    net.parent_address = net.address & parent_mask;

    // parent pipe is the part OUT of the mask
    var u16 i = net.address;
    var u16 m = parent_mask;

    loop do
        if m == 0 then
            break;
        end
        i = i >> 3;
        m = m >> 3;
    end
    net.parent_pipe = i as u8;

    //{IF_SERIAL_DEBUG_MINIMAL( printf_P(PSTR("setup_address node=0%o mask=0%o parent=0%o pipe=0%o\n\r"),@(net.address),@(net.mask),@(net.parent_address),@(net.parent_pipe)););}
end

code/await RF24Network_Write_To_Pipe (var& RF24Network_ net, var u16 node, var u8 pipe, var bool is_mcast) -> bool do
#if 0
    if is_mcast then
        await Nrf24l01_Set_Auto_Ack(&net.nrf, 0, false);
    else
        // TODO: nao esta funcionando
        //await Nrf24l01_Set_Auto_Ack(&net.nrf, 0, true);
    end
#endif

    var u64 out_pipe = {RF24Network__pipe_address(@node, @pipe)};
    await Nrf24l01_Open_Writing_Pipe(&net.nrf, out_pipe);

    var bool ok = await Nrf24l01_TX(&net.nrf, &net.buf);

    //if not ({network.networkFlags & FLAG_FAST_FRAG} as bool) then
        await Nrf24l01_Set_Auto_Ack(&net.nrf, 0, false);
    //end

    escape ok;
end

code/await RF24Network_Write (var& RF24Network_ net, var u16 to_node, var u8 direct_to) -> bool do
    var bool is_ack = (net.buf[6]>64 and net.buf[6]<192);

    // load info into our conversion structure, and get the converted address info
    var _RF24Network__logicalToPhysicalStruct conversion = { {@to_node,@direct_to,0} };
    {RF24Network__logicalToPhysicalAddress(@&&net, &@conversion);}

    var bool ok = await RF24Network_Write_To_Pipe(&net, conversion.send_node, conversion.send_pipe, conversion.multicast as bool);
    //_ceu_assert(ok, "bug found");

    if direct_to=={TX_ROUTED} and conversion.send_node==to_node and is_ack then
_ceu_arduino_assert(0,5); // nunca entrei aqui
#if 0
        var _RF24Network__Header&& header = &&net.buf[0] as _RF24Network__Header&&;
        header:type    = {NETWORK_ACK};     // Set the payload type to NETWORK_ACK
        header:to_node = header:from_node;  // Change the 'to' address to the 'from' address

        conversion.send_node = header:from_node;
        conversion.send_pipe = {TX_ROUTED};
        conversion.multicast = 0;
        {RF24Network__logicalToPhysicalAddress(@&&net, &@conversion);}

        //Write the data using the resulting physical address
        //{network.frame_size = sizeof(RF24Network__Header);}
        await RF24Network_Write_To_Pipe(&net, conversion.send_node, conversion.send_pipe, conversion.multicast as bool);
#endif
    end

    escape ok;
end

code/await RF24Network (var& RF24Network_ net, var u8? channel) -> NEVER do
    _ceu_assert({RF24Network__is_valid_address(@net.address)}, "invalid address");

    if channel? then
        await Nrf24l01_Set_Channel(&net.nrf, channel!);
    end

    call RF24Network_setup_address(&net);

    var int i;
    loop i in [0 <- 5] do
        await Nrf24l01_Open_Reading_Pipe(&net.nrf, i, {RF24Network__pipe_address(@net.address,@i)});
    end

    emit net.ok;
    await FOREVER;
end

code/await RF24Network_RX (var& RF24Network_ net) -> NEVER do
    loop do
        $net.buf = 0;
        var u8 pipe = await Nrf24l01_RX(&net.nrf, &net.buf);
        var _RF24Network__Header&& header = &&net.buf[0] as _RF24Network__Header&&;
        { S.println(@(header:to_node)); }

        if header:to_node == net.address then
            if header:type == NETWORK_PING then
_ceu_arduino_assert(0,4); // nunca entrei aqui
                continue;
            end

            if header:type == NETWORK_ADDR_RESPONSE then
                var u16 requester = NETWORK_DEFAULT_ADDRESS;
                if requester != net.address then
_ceu_arduino_assert(0,4); // nunca entrei aqui
                    header:to_node = requester;
                    //write(header->to_node,USER_TX_TO_PHYSICAL_ADDRESS);
                    //await 10ms; // TODO: pode perder pacotes
                    //write(header->to_node,USER_TX_TO_PHYSICAL_ADDRESS);
                    //printf("Fwd add response to 0%o\n",requester);
                    continue;
                end
            end

            if header:type==NETWORK_REQ_ADDRESS and net.address!=0 then
_ceu_arduino_assert(0,3); // nunca entrei aqui
                //printf("Fwd add req to 0\n");
                header:from_node = net.address;
                header:to_node = 0;
                //write(header->to_node,TX_NORMAL);
                continue;
            end

#if 0
            if( (returnSysMsgs && header->type > 127) || header->type == NETWORK_ACK ){
                IF_SERIAL_DEBUG_ROUTING( printf_P(PSTR("%lu MAC: System payload rcvd %d\n"),millis(),returnVal); );
                //if( (header->type < 148 || header->type > 150) && header->type != NETWORK_MORE_FRAGMENTS_NACK && header->type != EXTERNAL_DATA_TYPE && header->type!= NETWORK_LAST_FRAGMENT)
                if( header->type != NETWORK_FIRST_FRAGMENT && header->type != NETWORK_MORE_FRAGMENTS && header->type != NETWORK_MORE_FRAGMENTS_NACK && header->type != EXTERNAL_DATA_TYPE && header->type!= NETWORK_LAST_FRAGMENT){
                    return returnVal;
                }
            }
#endif

            emit net.rx;
        else
            await RF24Network_Write(&net, header:to_node, TX_ROUTED);
        end
    end
end

code/await RF24Network_TX (var& RF24Network_ net, var _RF24Network__Header&& header, var byte&& payload, var usize len) -> bool do
    header:from_node = net.address;
    header:id        = net.tx_seqno;
    header:type      = 0;
    net.tx_seqno = net.tx_seqno + 1;
    {
        ceu_vector_setlen(@&&net.buf, sizeof(RF24Network__Header), 1);
        memcpy(@&&net.buf[0], @header, sizeof(RF24Network__Header));

        ceu_vector_setlen(@&&net.buf, sizeof(RF24Network__Header)+@len, 1);
        memcpy(@&&net.buf[sizeof(_RF24Network__Header)], @payload, @len);
    }

    var bool ok = await RF24Network_Write(&net, header:to_node, {TX_NORMAL});
    escape ok;
end
